services:
  user-auth-ms:
    build:
      context: user_auth_microservice
    ports:
      - '50051:50051'
      - '8001:8001'
    networks:
      - user-auth-db
      - backend
    depends_on:
      user-auth-mariadb:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      user-auth-redis:
        condition: service_healthy

  user-auth-mariadb:
    image: mariadb:latest
    container_name: user-auth-mariadb
    environment:
      MYSQL_DATABASE: user-auth
      MYSQL_ROOT_PASSWORD: root-pass
      MYSQL_USER: user-auth-manager
      MYSQL_PASSWORD: manager-pass
    ports:
      - '3306:3306'
    volumes:
      - ./user_auth_microservice/src/persistence/config/initdb/:/docker-entrypoint-initdb.d
      - user_auth_mariadb_data:/var/lib/mysql
    networks:
      - user-auth-db
    healthcheck:
      test: ["CMD", "mariadb", "-h", "localhost", "-u", "user-auth-manager", "-pmanager-pass", "-e", "SELECT 1"]
      interval: 30s
      retries: 5
      start_period: 30s
      timeout: 20s

  user-auth-redis:
    image: redis:alpine
    ports:
      - "6379:6379"
    networks:
      - user-auth-db
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s

  user-auth-envoy-proxy:
    image: envoyproxy/envoy:v1.33-latest
    container_name: user-auth-envoy-proxy
    volumes:
      - ./user_auth_proxy/envoy.yaml:/etc/envoy/envoy.yaml
    ports:
      - "8000:8000" 
    depends_on:
      - user-auth-ms
    networks:
      - backend

  user-management-ms:
    build:
      context: user_management_microservice
    ports:
      - '8080:8080'
    networks:
      - user-management-db
      - backend
    depends_on:
      user-management-mariadb:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

  user-management-mariadb:
    image: mariadb:latest
    container_name: user-management-mariadb
    environment:
      MYSQL_DATABASE: user-management
      MYSQL_ROOT_PASSWORD: root-pass
      MYSQL_USER: user-management-manager
      MYSQL_PASSWORD: manager-pass
    ports:
      - '3307:3306'
    volumes:
      - ./user_management_microservice/Infrastructure/Persistence/Config/Scripts/InitDb/:/docker-entrypoint-initdb.d
      - user_management_mariadb_data:/var/lib/mysql
    networks:
      - user-management-db
    healthcheck:
      test: ["CMD", "mariadb", "-h", "localhost", "-u", "user-management-manager", "-pmanager-pass", "-e", "SELECT 1"]
      interval: 30s
      retries: 5
      start_period: 30s
      timeout: 20s

  service-catalog-ms:
    build:
      context: service_catalog_microservice
    ports:
      - "8081:8081" 
    networks:
      - service-catalog-db
      - backend
    depends_on:
      service-catalog-mongodb:
        condition: service_healthy
  
  service-catalog-mongodb:
    image: mongo:7.0.9
    container_name: service-catalog-mongodb
    ports:
      - "27017:27017"
    volumes:
      - ./service_catalog_microservice/src/main/java/ro/urhomie/service_catalog/persistence/config:/docker-entrypoint-initdb.d
      - service_catalog_mongodb_data:/data/db
    networks:
      - backend
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 5s
      retries: 5
    command: mongod --quiet --logpath /dev/null 

  booking-ms:
    build:
      context: booking_microservice
    ports:
      - "8082:8082" 
    networks:
      - booking-db
      - backend
    depends_on:
      booking-mariadb:
        condition: service_healthy

  booking-mariadb:
    image: mariadb:latest
    container_name: booking-mariadb
    environment:
      MYSQL_DATABASE: booking-service
      MYSQL_ROOT_PASSWORD: root-pass
      MYSQL_USER: booking-service-manager
      MYSQL_PASSWORD: manager-pass
    ports:
      - '3308:3306'
    volumes:
      - ./booking_microservice/src/main/java/ro/urhomie/booking/persistence/config:/docker-entrypoint-initdb.d
      - booking_mariadb_data:/var/lib/mysql
    networks:
      - booking-db
    healthcheck:
      test: ["CMD", "mariadb", "-h", "localhost", "-u", "booking-service-manager", "-pmanager-pass", "-e", "SELECT 1"]
      interval: 30s
      retries: 5
      start_period: 30s
      timeout: 20s

  rabbitmq:
    image: rabbitmq:4.0.7-management-alpine
    container_name: rabbitmq
    ports:
      - "5672:5672"    
      - "15672:15672" 
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - backend
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 10s
      retries: 5

  nginx-reverse-proxy:
    image: nginx:latest
    container_name: nginx-reverse-proxy
    volumes:
      - ./reverse_proxy/nginx.conf:/etc/nginx/nginx.conf
    ports:
      - "80:80" 
    depends_on:
      - user-auth-envoy-proxy
    networks:
      - backend

volumes:
  user_auth_mariadb_data:
  user_management_mariadb_data:
  service_catalog_mongodb_data:
  booking_mariadb_data:
  rabbitmq_data:

networks:
  user-auth-db:
    driver: bridge
  user-management-db:
    driver: bridge
  service-catalog-db:
    driver: bridge
  booking-db:
    driver: bridge
  backend:
    driver: bridge