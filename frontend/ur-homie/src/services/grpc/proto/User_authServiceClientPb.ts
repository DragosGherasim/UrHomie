/**
 * @fileoverview gRPC-Web generated client stub for 
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v5.29.3
// source: user_auth.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as user_auth_pb from './user_auth_pb'; // proto import: "user_auth.proto"


export class UserAuthenticationClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorLogIn = new grpcWeb.MethodDescriptor(
    '/UserAuthentication/LogIn',
    grpcWeb.MethodType.UNARY,
    user_auth_pb.LogInRequest,
    user_auth_pb.LogInResponse,
    (request: user_auth_pb.LogInRequest) => {
      return request.serializeBinary();
    },
    user_auth_pb.LogInResponse.deserializeBinary
  );

  logIn(
    request: user_auth_pb.LogInRequest,
    metadata?: grpcWeb.Metadata | null): Promise<user_auth_pb.LogInResponse>;

  logIn(
    request: user_auth_pb.LogInRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: user_auth_pb.LogInResponse) => void): grpcWeb.ClientReadableStream<user_auth_pb.LogInResponse>;

  logIn(
    request: user_auth_pb.LogInRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: user_auth_pb.LogInResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/UserAuthentication/LogIn',
        request,
        metadata || {},
        this.methodDescriptorLogIn,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/UserAuthentication/LogIn',
    request,
    metadata || {},
    this.methodDescriptorLogIn);
  }

  methodDescriptorValidateJwt = new grpcWeb.MethodDescriptor(
    '/UserAuthentication/ValidateJwt',
    grpcWeb.MethodType.UNARY,
    user_auth_pb.ValidateJwtRequest,
    user_auth_pb.ValidateJwtResponse,
    (request: user_auth_pb.ValidateJwtRequest) => {
      return request.serializeBinary();
    },
    user_auth_pb.ValidateJwtResponse.deserializeBinary
  );

  validateJwt(
    request: user_auth_pb.ValidateJwtRequest,
    metadata?: grpcWeb.Metadata | null): Promise<user_auth_pb.ValidateJwtResponse>;

  validateJwt(
    request: user_auth_pb.ValidateJwtRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: user_auth_pb.ValidateJwtResponse) => void): grpcWeb.ClientReadableStream<user_auth_pb.ValidateJwtResponse>;

  validateJwt(
    request: user_auth_pb.ValidateJwtRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: user_auth_pb.ValidateJwtResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/UserAuthentication/ValidateJwt',
        request,
        metadata || {},
        this.methodDescriptorValidateJwt,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/UserAuthentication/ValidateJwt',
    request,
    metadata || {},
    this.methodDescriptorValidateJwt);
  }

  methodDescriptorSignUp = new grpcWeb.MethodDescriptor(
    '/UserAuthentication/SignUp',
    grpcWeb.MethodType.UNARY,
    user_auth_pb.SignUpRequest,
    user_auth_pb.SignUpResponse,
    (request: user_auth_pb.SignUpRequest) => {
      return request.serializeBinary();
    },
    user_auth_pb.SignUpResponse.deserializeBinary
  );

  signUp(
    request: user_auth_pb.SignUpRequest,
    metadata?: grpcWeb.Metadata | null): Promise<user_auth_pb.SignUpResponse>;

  signUp(
    request: user_auth_pb.SignUpRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: user_auth_pb.SignUpResponse) => void): grpcWeb.ClientReadableStream<user_auth_pb.SignUpResponse>;

  signUp(
    request: user_auth_pb.SignUpRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: user_auth_pb.SignUpResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/UserAuthentication/SignUp',
        request,
        metadata || {},
        this.methodDescriptorSignUp,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/UserAuthentication/SignUp',
    request,
    metadata || {},
    this.methodDescriptorSignUp);
  }

  methodDescriptorRefreshToken = new grpcWeb.MethodDescriptor(
    '/UserAuthentication/RefreshToken',
    grpcWeb.MethodType.UNARY,
    user_auth_pb.Empty,
    user_auth_pb.LogInResponse,
    (request: user_auth_pb.Empty) => {
      return request.serializeBinary();
    },
    user_auth_pb.LogInResponse.deserializeBinary
  );

  refreshToken(
    request: user_auth_pb.Empty,
    metadata?: grpcWeb.Metadata | null): Promise<user_auth_pb.LogInResponse>;

  refreshToken(
    request: user_auth_pb.Empty,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: user_auth_pb.LogInResponse) => void): grpcWeb.ClientReadableStream<user_auth_pb.LogInResponse>;

  refreshToken(
    request: user_auth_pb.Empty,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: user_auth_pb.LogInResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/UserAuthentication/RefreshToken',
        request,
        metadata || {},
        this.methodDescriptorRefreshToken,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/UserAuthentication/RefreshToken',
    request,
    metadata || {},
    this.methodDescriptorRefreshToken);
  }

  methodDescriptorLogOut = new grpcWeb.MethodDescriptor(
    '/UserAuthentication/LogOut',
    grpcWeb.MethodType.UNARY,
    user_auth_pb.Empty,
    user_auth_pb.Empty,
    (request: user_auth_pb.Empty) => {
      return request.serializeBinary();
    },
    user_auth_pb.Empty.deserializeBinary
  );

  logOut(
    request: user_auth_pb.Empty,
    metadata?: grpcWeb.Metadata | null): Promise<user_auth_pb.Empty>;

  logOut(
    request: user_auth_pb.Empty,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: user_auth_pb.Empty) => void): grpcWeb.ClientReadableStream<user_auth_pb.Empty>;

  logOut(
    request: user_auth_pb.Empty,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: user_auth_pb.Empty) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/UserAuthentication/LogOut',
        request,
        metadata || {},
        this.methodDescriptorLogOut,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/UserAuthentication/LogOut',
    request,
    metadata || {},
    this.methodDescriptorLogOut);
  }

}

